cmd切换，命令
1. 直接输入盘符加冒号，例如:d:
2. 使用 cd /d 路径，例如： cd d/ f:

ex1 :
1. python 2 使用print ""；python3 使用print ("")

ex6
1. x = "There are %d types of people." % 10
2. %s , %r 区别
%r is the best for debugging

ex7:
所有操作在print函数中执行。

ex9：
\ 反斜杠，用于转义字符

ex10：
\\         Backslash(\)
\'         Single-quote(')
\''        Double-quote('')
\a        ASCII bell(BEL)
\b        ASCII backspace(BS)
\f         ASCII formfeed(FF)
\n        ASCII linefeed(LF)
\N
\r        ASCII
\t        ASCII
\uxx
\v

ex13:
from sys import argv用法
argv，argv是要给数组，默认只有一个参数argv[0]，要增加参数需要在运行.py时 设置参数。
例如：
ex13.py文件
from sys import argv
script, first, second, third = argv
print ("The script is called:", script)
print ("Your first variable is:", first)
print ("Your second variable is:", second)
print ("Your third variable is:", third)
在运行的时候，python.ex13 1 2 3 这样才会有四个参数。



ex15：
查看命令：help(命令)






**********************************************
ex2:
#能够对代码进行注释，解释下面执行的代码的功能

ex3:
print函数能够打印""里面的信息，也能够打印数学公式计算出来的结果。

ex4:
可以将一个数值赋值给一个参数，以后如果使用到这个数值时，直接调用参数即可。

ex5:
1. print()函数可以打印不同类型的变量：字符或数字，同时还能够进行对齐，确定打印出来的变量的长度和精度。
2. 将同一个数字或字符串赋值给不同的变量，使用变量打印出来的结果是相同的。

ex6：
1.在sting中可以有sting存在
2. + 可以连接2个sting

ex8:
1. %r 能够打印出 %()后面原始的数据。
2. 如果string中有单引号存在，那么打印出来的结果会使用双引号。

ex9:
1. 使用\n时能够自动换行。
2. \（反斜杠），用于转义字符

ex10:
1.使用/s和/r打印出来的结果不一样。使用/s直接打印出双引号中的内容，使用/r将双引号中的内容使用单引号显示出来。
2. 常用的转义字符
\\         Backslash(\)
\'         Single-quote(')
\''        Double-quote('')
\a        ASCII bell(BEL)
\b        ASCII backspace(BS)
\f         ASCII formfeed(FF)
\n        ASCII linefeed(LF)
\N
\r        ASCII
\t        ASCII
\uxx
\v

ex11:
使用input()函数，能够通过交互界面输入一个参数。

ex12:
1. 使用python -m pydoc input 能够查看builtin函数input()的用法
在python3.6 IDLE中运行python -m pydoc input出现错误如下：
SyntaxError: invalid syntax
解决方法：查询资料后知道，需要在windows下cmd窗口运行python -m pydoc input
才能够正常显示出信息。
2. 还可以使用help(input())或者dir(input())

ex13:
1.直接运行ex13.py时，报错如下：
H:\python\exercise>python ex13.py
Traceback (most recent call last):
  File "ex13.py", line 2, in <module>
    script, first, second, third = argv
ValueError: not enough values to unpack (expected 4, got 1)
阅读错误后发现是变量不够，重新阅读之后发现正确的运行方式是python ex13.py 1 2 3这样程序才能够正常运行
2. argv，argv是要给数组，默认只有一个参数argv[0]，要增加参数需要在运行.py时 设置参数。
3.在练习study drill时，将输入变量中间加入“,” ，出现如下错误：
H:\python\exercise>python ex13_2.py hubei , wuhan , jiangan 185123456789
Traceback (most recent call last):
  File "ex13_2.py", line 2, in <module>
    script, province, city, street, phone = argv
ValueError: too many values to unpack (expected 5)
解决：在运行.py程序时，变量之间不能有符号，系统会把符号当成变量。
4.WYSS means what you should see

ex14:
1. 在input()函数中可以输入一些提示信息便于告之输入者需要输入信息的类型。

ex15:
1. 运行ex15.py时出现错误如下：
H:\python\exercise>python ex15.py ex15_sample.txt
Traceback (most recent call last):
  File "ex15.py", line 3, in <module>
    txt = open(filename)
FileNotFoundError: [Errno 2] No such file or directory: 'ex15_sample.txt'
阅读之后发现是因为在目录中没有ex15_sample.txt存在，在目录中新建ex15_sample.txt之后，可以正常运行。
2. open()函数返回一个file object。如果不能够打开文件，会返回一个OSError的错误。
3. open()函数可以选择如下方式打开一个文件：
'r' open for reading (default)
'w' open for writing, truncating the file first
'x' open for exclusive creation, failing if the file already exists
'a' open for writing, appending to the end of the file if it exists
'b' binary mode
't' text mode (default)
'+' open a disk file for updating (reading and writing)
'U' universal newlines mode (deprecated)
4. read()函数能够一次读取文件的全部内容，与read()类似的函数有readline()和readlines()
readline一次读取一行数据，readlines()一次读取全部数据

ex16:
1. truncate()函数用于截断文件，如果指定了可选参数size，则表示截断文件为size个字符。如果没有指定size，则从当前位置起截断；截断之后size后面的所有字符被删除。
2. write()函数既可以一行一行的写，也可以一次全部写入


ex17:
1. input()函数不进行赋值时，输入回车继续往下执行，输入Ctrl+C结束程序。
2. exists()函数检查文件是否存在，如果文件存在返回True，如果文件不存在返回False。
3. os模块是python标准库中一个用于访问操作系统功能的模块。
4. linux下cat 命苦可以查看文件内容
5. windows下type命令可以查看文件内容

ex18:
1. function的作用：写一个function后，下次需要使用时，能够直接调用该function，而不需要重新写一次代码。
2. function以def关键词开头，后面接函数标识符名称和圆括号()
3. 任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定于参数。
4.函数内容以冒号开始，并且缩进
5.函数可以带return ，也可以不带return。
6.调用函数时，直接调用函数名并赋值参数即可实现函数的功能。

6. function checklist:
1. Did you start your function definition with def?
2. Does your function name have only characters and _ (underscore) characters?
3. Did you put an open parenthesis ( right after the function name?
4. Did you put your arguments after the parenthesis ( separated by commas?
5. Did you make each argument unique (meaning no duplicated names)?
6. Did you put a close parenthesis and a colon ): after the arguments?
7. Did you indent all lines of code you want in the function four spaces? No more, no less.
8. Did you “end” your function by going back to writing with no indent (dedenting we call it)?
And when you run (“use” or “call”) a function, check these things:
1. Did you call/use/run this function by typing its name?
2. Did you put the ( character after the name to run it?
3. Did you put the values you want into the parenthesis separated by commas?
4. Did you end the function call with a ) character?


ex19:
1.在做study drill时出现如下错误
And we can use variables from keyboard:
Traceback (most recent call last):
  File "ex19_1.py", line 25, in <module>
    caculate(first_data,secodn_data)
  File "ex19_1.py", line 3, in caculate
    substruct = x - y
TypeError: unsupported operand type(s) for -: 'str' and 'str'
解决方法：input()函数输出的数据类型是str，需要将str转换为float。


ex20:
1. seek()方法用于移动文件读取指针到指定位置。
语法如下：fileObject.seek(offset[, whence])
参数：offset —— 开始的偏移量，也就是代表需要移动偏移的字节数
      whence : 可选，默认值为0.
               0表示从文件开头开始算起，
               1表示从文件当前位置算起，
               2代表从文件末尾算起
2. current_line += 1 means current_line =  current_line + 1



